stages:
  - preparation
  - build-assets
  - test
  - build
  - deploy

workflow:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v(\S)+-production/' # Production Deployment
      variables:
        CI_ENVIRONMENT: production
    - if: '$CI_COMMIT_TAG =~ /^v(\S)+-stage/' # Stage Deployment
      variables:
        CI_ENVIRONMENT: stage
    - when: always

.test-rules:
  # Run manually if draft/wip merge request, otherwise run on success if merge request or main branch commit
  - if: '$CI_MERGE_REQUEST_ID && ($CI_MERGE_REQUEST_TITLE !~ /^WIP: .*/ && $CI_MERGE_REQUEST_TITLE !~ /^Draft: .*/)'
    when: on_success
  - if: '$CI_MERGE_REQUEST_ID && ($CI_MERGE_REQUEST_TITLE =~ /^WIP: .*/ || $CI_MERGE_REQUEST_TITLE =~ /^Draft: .*/)'
    when: manual
  - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    when: on_success

.deploy-rules:
  # Run on success if tagged with a version, e.g. v1.0.2-production
  - if: '$CI_COMMIT_TAG =~ /^v(\S)+-(stage|production)/'
    when: on_success

npm:
  stage: preparation
  image: node:20-alpine
  script:
    - cd ./wordpress/wp-content/themes/juicystrap
    - npm install
  artifacts:
    paths:
      - ./wordpress/wp-content/themes/juicystrap/node_modules
    expire_in: 1 days
    when: always
  rules:
    - !reference [.test-rules]
    - !reference [.deploy-rules]

build-assets:
  stage: build-assets
  image: node:20-alpine
  needs:
    - job: npm
      artifacts: true
  script:
    - cd ./wordpress/wp-content/themes/juicystrap
    - npm run production
  artifacts:
    paths:
      - ./wordpress/wp-content/themes/juicystrap/assets/dist
    expire_in: 1 days
    when: always
  rules:
    - !reference [.test-rules]
    - !reference [.deploy-rules]

prettier:
  stage: test
  image: node:20-alpine
  needs:
    - job: npm
      artifacts: true
  script:
    - cd  ./wordpress/wp-content/themes/juicystrap
    - npm run lint:prettier
  rules:
    - !reference [.test-rules]
    - !reference [.deploy-rules]

eslint:
  stage: test
  image: node:20-alpine
  needs:
    - job: npm
      artifacts: true
  script:
    - cd ./wordpress/wp-content/themes/juicystrap
    - npm run lint:js
  rules:
    - !reference [.test-rules]
    - !reference [.deploy-rules]

stylelint:
  stage: test
  image: node:20-alpine
  needs:
    - job: npm
      artifacts: true
  script:
    - cd ./wordpress/wp-content/themes/juicystrap
    - npm run lint:style
  rules:
    - !reference [.test-rules]
    - !reference [.deploy-rules]

build-docker:
  stage: build
  image: docker:24
  environment:
    name: $CI_ENVIRONMENT
  services:
    - name: docker:24-dind
      alias: docker
  before_script:
    - docker info
  dependencies:
    - build-assets

  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_TAG:1}" -t "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_ENVIRONMENT}" .  --platform ${IMAGE_PLATFORM:-linux/amd64}
    - if [ "$CI_ENVIRONMENT" == "production" ]; then docker tag "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_TAG:1}" "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest"; fi
    - docker push --all-tags "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}"
  rules:
    - !reference [.deploy-rules]

deploy:
  stage: deploy
  environment:
    name: $CI_ENVIRONMENT
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  dependencies:
  - build-docker
  script:
    - >
      export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
      $(aws sts assume-role-with-web-identity
      --role-arn ${ROLE_ARN}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token ${GITLAB_OIDC_TOKEN}
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))
    - aws sts get-caller-identity
    - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment --no-cli-pager
  rules:
    - !reference [.deploy-rules]
