name: CI/CD Workflow

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{github.repository}}
  AWS_DEFAULT_REGION: 'eu-west-2'
  ECS_CLUSTER: 'wordpress-terraform-dev'
  ECS_SERVICE: 'wordpress-terraform-dev'
  

on:
  push:
    branches:
      - '*'
  pull_request:
    types:
      - closed

jobs:
  npm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          npm install

  build-assets:
    runs-on: ubuntu-latest
    needs: npm
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Print Versions
        run: |
          node --version
          npm --version

      - name: Build assets
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          npm run production

  prettier:
    runs-on: ubuntu-latest
    needs: npm
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Prettier
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          npm run lint:prettier
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed')

  eslint:
    runs-on: ubuntu-latest
    needs: npm
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run ESLint
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          npm run lint:js
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed')

  stylelint:
    runs-on: ubuntu-latest
    needs: npm
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run StyleLint
        run: |
          cd ./wordpress/wp-content/themes/juicystrap
          npm run lint:style
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed')

  build-docker:
    runs-on: ubuntu-latest
    needs: build-assets
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Echo refs
        run: |
          echo "${{ github.ref }}"
          exit 1 

      - name: Set up Docker
        uses: docker/setup-docker@v1

      - name: Build and push Docker image in staging
        run: |
          docker login -u ${{ github.actor }} -p ${{ secrets.REGISTRY_PASSWORD }} ${{ env.REGISTRY }}
          docker build -t "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" . --platform linux/amd64
          if [ "ADD_ENVIRONMENT_HERE" == "production" ]; then docker tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ADD_COMMIT_TAG_HERE" "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"; fi
          docker push "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed')

  deploy:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          role-session-name: samplerolesession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Deploy to AWS ECS
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment --no-cli-pager
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event_name != 'delete')